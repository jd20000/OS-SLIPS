Q1]

#include <stdio.h>
#include<stdlib.h>

#define MAX_PROCESSES 5
#define MAX_RESOURCES 3

int allocation[MAX_PROCESSES][MAX_RESOURCES];
int max[MAX_PROCESSES][MAX_RESOURCES];
int need[MAX_PROCESSES][MAX_RESOURCES];
int available[MAX_RESOURCES];

void acceptAvailable() {
    printf("Enter the available resources:\n");
    for (int i = 0; i < MAX_RESOURCES; i++) {
        printf("Resource %d: ", i + 1);
        scanf("%d", &available[i]);
    }
}

void displayAllocationMax() {
    printf("Process Allocation Max\n");
    for (int i = 0; i < MAX_PROCESSES; i++) 
    {
        printf("P%d\t", i);
        for (int j = 0; j < MAX_RESOURCES; j++)
        {
            printf("%d ", allocation[i][j]);
        }
        printf("\t");
        for (int j = 0; j < MAX_RESOURCES; j++) 
        {
            printf("%d ", max[i][j]);
        }
        printf("\n");
    }
}

void displayNeedMatrix() {
    printf("Need Matrix\n");
    for (int i = 0; i < MAX_PROCESSES; i++) {
        printf("P%d\t", i);
        for (int j = 0; j < MAX_RESOURCES; j++) {
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }
}

void displayAvailable() {
    printf("Available Resources: ");
    for (int i = 0; i < MAX_RESOURCES; i++) {
        printf("%d ", available[i]);
    }
    printf("\n");
}

int main() {
    // Initialize allocation and max matrices
    int allocationArray[MAX_PROCESSES][MAX_RESOURCES] = {
        {2, 3, 2},
        {4, 0, 0},
        {5, 0, 4},
        {4, 3, 3},
        {2, 2, 4}
    };
    int maxArray[MAX_PROCESSES][MAX_RESOURCES] = {
        {9, 7, 5},
        {5, 2, 2},
        {1, 0, 4},
        {4, 4, 4},
        {6, 5, 5}
    };

    // Copy the arrays to global variables
    for (int i = 0; i < MAX_PROCESSES; i++) {
        for (int j = 0; j < MAX_RESOURCES; j++) {
            allocation[i][j] = allocationArray[i][j];
            max[i][j] = maxArray[i][j];
            need[i][j] = abs(max[i][j] - allocation[i][j]);
        }
    }

    int choice;
    do {
        printf("\nMenu:\n");
        printf("1. Accept Available Resources\n");
        printf("2. Display Allocation and Max\n");
        printf("3. Display Need Matrix\n");
        printf("4. Display Available Resources\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                acceptAvailable();
                break;
            case 2:
                displayAllocationMax();
                break;
            case 3:
                displayNeedMatrix();
                break;
            case 4:
                displayAvailable();
                break;
            case 5:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice! Please enter a number between 1 and 5.\n");
        }
    } while (choice != 5);

    return 0;
}


Q2]

#include<stdio.h>
#include<stdlib.h>

int main()
{
    int q[20],head,n,i,j,seek=0,max,diff;
    printf("\nEnter Max Range of Disk: ");
    scanf("%d",&max);
    printf("\nEnter size of queue request: ");
    scanf("%d",&n);
    printf("\nEnter queue disk position to be read: ");
    for (i=1;i<=n;i++)
       scanf("%d",&q[i]);
    printf("\nEnter Initial Head Position: ");
    scanf("%d",&head);
    q[0]=head;
    for (j=0;j<n;j++)
    {
        diff = abs(q[j+1]-q[j]);
        seek+=diff;
        printf("Disk head moves from %d to %d with seek %d.\n",q[j],q[j+1],diff);
    }   
    printf("Total Head Movement is %d. \n",seek);
    return 0;
}
