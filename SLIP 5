Q1]

#include <stdio.h>
#include <stdbool.h>

#define MAX_PROCESSES 10
#define MAX_RESOURCES 10

int available[MAX_RESOURCES];
int allocation[MAX_PROCESSES][MAX_RESOURCES];
int max[MAX_PROCESSES][MAX_RESOURCES];
int need[MAX_PROCESSES][MAX_RESOURCES];
int m, n;

// Function to initialize the system state
void initializeSystem() {
    printf("Enter the number of resource types (n): ");
    scanf("%d", &n);

    printf("Enter the number of instances for each resource type:\n");
    for (int i = 0; i < n; i++) {
        printf("Resource type %d: ", i);
        scanf("%d", &available[i]);
    }

    printf("Enter the number of processes (m): ");
    scanf("%d", &m);

    printf("Enter the allocation matrix (m x n):\n");
    for (int i = 0; i < m; i++) {
        printf("Process %d: ", i);
        for (int j = 0; j < n; j++) {
            scanf("%d", &allocation[i][j]);
        }
    }

    printf("Enter the maximum requirement matrix (m x n):\n");
    for (int i = 0; i < m; i++) {
        printf("Process %d: ", i);
        for (int j = 0; j < n; j++) {
            scanf("%d", &max[i][j]);
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }
}

// Function to display the contents of the need matrix
void displayNeedMatrix() {
    printf("\nNeed Matrix:\n");
    for (int i = 0; i < m; i++) {
        printf("Process %d: ", i);
        for (int j = 0; j < n; j++) {
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }
}

// Function to check if a request can be granted immediately
bool canGrantRequest(int process, int request[]) {
    for (int i = 0; i < n; i++) {
        if (request[i] > need[process][i] || request[i] > available[i]) {
            return false;
        }
    }
    return true;
}

int main() {
    initializeSystem();
    displayNeedMatrix();

    int process;
    printf("\nEnter the process number for which you want to check request: ");
    scanf("%d", &process);

    int request[MAX_RESOURCES];
    printf("Enter the request for process %d: ", process);
    for (int i = 0; i < n; i++) {
        scanf("%d", &request[i]);
    }

    if (canGrantRequest(process, request)) {
        printf("Request can be granted immediately.\n");
    } else {
        printf("Request cannot be granted immediately.\n");
    }

    return 0;
}


Q2]

#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

#define ARRAY_SIZE 1000

int main(int argc, char *argv[]) {
    int rank, size;
    int array[ARRAY_SIZE];
    int local_max = 0, global_max = 0;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Initialize random number generator
    srand(rank + 1);

    // Generate random numbers for each process
    for (int i = 0; i < ARRAY_SIZE; i++) {
        array[i] = rand();
    }

    // Calculate local max
    for (int i = 0; i < ARRAY_SIZE; i++) {
        if (array[i] > local_max) {
            local_max = array[i];
        }
    }

    // Reduce to get global max
    MPI_Reduce(&local_max, &global_max, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);

    // Print global max on root process
    if (rank == 0) {
        printf("Maximum number: %d\n", global_max);
    }

    MPI_Finalize();
    return 0;
}
